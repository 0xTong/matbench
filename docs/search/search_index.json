{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Matbench v0.1 - Machine Learning Benchmark for Materials Science Leaderboard - General Purpose Algorithms task name verified top score (MAE or ROCAUC) algorithm name, config notes matbench_dielectric 0.299 (unitless) Automatminer express v1.0.3.2019111 matbench_expt_gap 0.416 eV Automatminer express v1.0.3.2019111 matbench_expt_is_metal 0.92 Automatminer express v1.0.3.2019111 matbench_glass 0.861 Automatminer express v1.0.3.2019111 matbench_jdft2d 38.6 meV/atom Automatminer express v1.0.3.2019111 matbench_log_gvrh 0.0849 log(GPa) Automatminer express v1.0.3.2019111 matbench_log_kvrh 0.0679 log(GPa) Automatminer express v1.0.3.2019111 matbench_mp_e_form 0.0327 eV/atom MEGNet v0.2.2 structure only matbench_mp_gap 0.228 eV CGCNN (2019) structure only matbench_mp_is_metal 0.977 MEGNet v0.2.2 structure only matbench_perovskites 0.0417 MEGNet v0.2.2 structure only matbench_phonons 36.9 cm^-1 MEGNet v0.2.2 structure only matbench_steels 95.2 MPa Automatminer express v1.0.3.2019111 Overview Matbench is an ImageNet for materials science ; a curated set of 13 supervised, pre-cleaned, ready-to-use ML tasks for benchmarking and fair comparison. The tasks span a wide domain of inorganic materials science applications including electronic, thermodynamic, mechanical, and thermal properties among crystals, 2D materials, disordered metals, and more. The Matbench python package provides everything needed to use Matbench with your ML algorithm in ~10 lines of code or less. What can Matbench offer? This website Leaderboard of results for state-of-the-art materials ML algorithms on standardized test problems Interactively explore and download the tasks on MPContribs-ML , a platform hosted by The Materials Project . See All Matbench Datasets for links to each dataset. Each and every result is backed by a peer-reviewed publication and a jupyter notebook (similar to Papers With Code) - i.e., how were these results were obtained? Glossary of all algorithms' results on the Matbench problems The Matbench Python package Probe ML algorithms strengths and weaknesses across a wide range of materials property prediction tasks Run a full benchmark in ~10 lines of code Submit results as a PR to the Matbench repo to compare with other algorithms and appear on the leaderboard Benchmark both general purpose ML models as well as algorithms specialized for particular domains Summary of Matbench's Tasks Matbench's 13 tasks can be broken down into various categories; it includes both the small - less than 10,000 samples - datasets that characterize experimental materials data as well as larger datasets from computer modelling methods like density functional theory (DFT). Each task in Matbench consists of a three things: A set of inputs: crystal structures or chemical compositions. A set of outputs: target properties, such as formation energy. A test procedure: a way to get a score for your algorithm The Matbench Python package provides functions for getting the first two (packaged together for each task as a dataset ) as well as running the test procedure. See the \"How to use Matbench\" documentation page to get started. All Matbench Datasets task name target column (unit) number of samples task type links matbench_dielectric n (unitless) 4,764 regression download , interactive matbench_expt_gap gap expt (eV) 4,604 regression download , interactive matbench_expt_is_metal is_metal (unitless) 4,921 classification download , interactive matbench_glass gfa (unitless) 5,680 classification download , interactive matbench_jdft2d exfoliation_en (meV/atom) 636 regression download , interactive matbench_log_gvrh log10(G_VRH) (log(GPa)) 10,987 regression download , interactive matbench_log_kvrh log10(K_VRH) (log(GPa)) 10,987 regression download , interactive matbench_mp_e_form e_form (eV/atom) 132,752 regression download , interactive matbench_mp_gap gap pbe (eV) 106,113 regression download , interactive matbench_mp_is_metal is_metal (unitless) 106,113 classification download , interactive matbench_perovskites e_form (eV, per unit cell) 18,928 regression download , interactive matbench_phonons last phdos peak (cm^-1) 1,265 regression download , interactive matbench_steels yield strength (MPa) 312 regression download , interactive Citing Matbench You can find details and results on the benchmark in our paper Benchmarking materials property prediction methods: the Matbench test set and Automatminer reference . Please consider citing this paper if you use Matbench v0.1 for benchmarking, comparison, or prototyping. You can cite Matbench using this reference: Dunn, A., Wang, Q., Ganose, A., Dopp, D., Jain, A. Benchmarking Materials Property Prediction Methods: The Matbench Test Set and Automatminer Reference Algorithm. npj Computational Materials 6, 138 (2020). https://doi.org/10.1038/s41524-020-00406-3","title":"Matbench v0.1 - Machine Learning Benchmark for Materials Science"},{"location":"#matbench-v01-machine-learning-benchmark-for-materials-science","text":"","title":"Matbench v0.1 - Machine Learning Benchmark for Materials Science"},{"location":"#leaderboard-general-purpose-algorithms","text":"task name verified top score (MAE or ROCAUC) algorithm name, config notes matbench_dielectric 0.299 (unitless) Automatminer express v1.0.3.2019111 matbench_expt_gap 0.416 eV Automatminer express v1.0.3.2019111 matbench_expt_is_metal 0.92 Automatminer express v1.0.3.2019111 matbench_glass 0.861 Automatminer express v1.0.3.2019111 matbench_jdft2d 38.6 meV/atom Automatminer express v1.0.3.2019111 matbench_log_gvrh 0.0849 log(GPa) Automatminer express v1.0.3.2019111 matbench_log_kvrh 0.0679 log(GPa) Automatminer express v1.0.3.2019111 matbench_mp_e_form 0.0327 eV/atom MEGNet v0.2.2 structure only matbench_mp_gap 0.228 eV CGCNN (2019) structure only matbench_mp_is_metal 0.977 MEGNet v0.2.2 structure only matbench_perovskites 0.0417 MEGNet v0.2.2 structure only matbench_phonons 36.9 cm^-1 MEGNet v0.2.2 structure only matbench_steels 95.2 MPa Automatminer express v1.0.3.2019111","title":"Leaderboard - General Purpose Algorithms"},{"location":"#overview","text":"Matbench is an ImageNet for materials science ; a curated set of 13 supervised, pre-cleaned, ready-to-use ML tasks for benchmarking and fair comparison. The tasks span a wide domain of inorganic materials science applications including electronic, thermodynamic, mechanical, and thermal properties among crystals, 2D materials, disordered metals, and more. The Matbench python package provides everything needed to use Matbench with your ML algorithm in ~10 lines of code or less.","title":"Overview"},{"location":"#what-can-matbench-offer","text":"","title":"What can Matbench offer?"},{"location":"#this-website","text":"Leaderboard of results for state-of-the-art materials ML algorithms on standardized test problems Interactively explore and download the tasks on MPContribs-ML , a platform hosted by The Materials Project . See All Matbench Datasets for links to each dataset. Each and every result is backed by a peer-reviewed publication and a jupyter notebook (similar to Papers With Code) - i.e., how were these results were obtained? Glossary of all algorithms' results on the Matbench problems","title":"This website"},{"location":"#the-matbench-python-package","text":"Probe ML algorithms strengths and weaknesses across a wide range of materials property prediction tasks Run a full benchmark in ~10 lines of code Submit results as a PR to the Matbench repo to compare with other algorithms and appear on the leaderboard Benchmark both general purpose ML models as well as algorithms specialized for particular domains","title":"The Matbench Python package"},{"location":"#summary-of-matbenchs-tasks","text":"Matbench's 13 tasks can be broken down into various categories; it includes both the small - less than 10,000 samples - datasets that characterize experimental materials data as well as larger datasets from computer modelling methods like density functional theory (DFT). Each task in Matbench consists of a three things: A set of inputs: crystal structures or chemical compositions. A set of outputs: target properties, such as formation energy. A test procedure: a way to get a score for your algorithm The Matbench Python package provides functions for getting the first two (packaged together for each task as a dataset ) as well as running the test procedure. See the \"How to use Matbench\" documentation page to get started.","title":"Summary of Matbench's Tasks"},{"location":"#all-matbench-datasets","text":"task name target column (unit) number of samples task type links matbench_dielectric n (unitless) 4,764 regression download , interactive matbench_expt_gap gap expt (eV) 4,604 regression download , interactive matbench_expt_is_metal is_metal (unitless) 4,921 classification download , interactive matbench_glass gfa (unitless) 5,680 classification download , interactive matbench_jdft2d exfoliation_en (meV/atom) 636 regression download , interactive matbench_log_gvrh log10(G_VRH) (log(GPa)) 10,987 regression download , interactive matbench_log_kvrh log10(K_VRH) (log(GPa)) 10,987 regression download , interactive matbench_mp_e_form e_form (eV/atom) 132,752 regression download , interactive matbench_mp_gap gap pbe (eV) 106,113 regression download , interactive matbench_mp_is_metal is_metal (unitless) 106,113 classification download , interactive matbench_perovskites e_form (eV, per unit cell) 18,928 regression download , interactive matbench_phonons last phdos peak (cm^-1) 1,265 regression download , interactive matbench_steels yield strength (MPa) 312 regression download , interactive","title":"All Matbench Datasets"},{"location":"#citing-matbench","text":"You can find details and results on the benchmark in our paper Benchmarking materials property prediction methods: the Matbench test set and Automatminer reference . Please consider citing this paper if you use Matbench v0.1 for benchmarking, comparison, or prototyping. You can cite Matbench using this reference: Dunn, A., Wang, Q., Ganose, A., Dopp, D., Jain, A. Benchmarking Materials Property Prediction Methods: The Matbench Test Set and Automatminer Reference Algorithm. npj Computational Materials 6, 138 (2020). https://doi.org/10.1038/s41524-020-00406-3","title":"Citing Matbench"},{"location":"full_benchmark_data/","text":"Coming soon! The full data for every benchmark submitted to Matbench will be available on this page. This includes: ever-growing data for every algorithm's prediction on all problems the hyperparameters determined for each fold, if reported statistics on the scores between folds, for various metrics (MAE, F1, ROC, RMSE, etc.) Please check back later for full access.","title":"Full benchmark data"},{"location":"full_benchmark_data/#coming-soon","text":"The full data for every benchmark submitted to Matbench will be available on this page. This includes: ever-growing data for every algorithm's prediction on all problems the hyperparameters determined for each fold, if reported statistics on the scores between folds, for various metrics (MAE, F1, ROC, RMSE, etc.) Please check back later for full access.","title":"Coming soon!"},{"location":"installation/","text":"Via GitHub Clone the repository with: git clone https://github.com/hackingmaterials/matbench To install for the current user: pip install --user ./matbench For development, install with cd matbench pip install -e . -r requirements.txt Via PyPi A matbench PyPi package is currently in development. Stay tuned for announcements!","title":"Installation"},{"location":"installation/#via-github","text":"Clone the repository with: git clone https://github.com/hackingmaterials/matbench To install for the current user: pip install --user ./matbench For development, install with cd matbench pip install -e . -r requirements.txt","title":"Via GitHub"},{"location":"installation/#via-pypi","text":"A matbench PyPi package is currently in development. Stay tuned for announcements!","title":"Via PyPi"},{"location":"running_and_submitting_benchmarks/","text":"This documentation si a work in progress. Please check back later for more detailed tutorials. Step 1: Install the python package See the installation page for more details. Step 2: Record your data. You can use the matbench python package to retrieve the training and testing splits as well as record new predictions. Recording and saving your data with matbench should take no more than 10 lines of matbench code. from matbench.bench import MatbenchBenchmark mb = MatbenchBenchmark ( autoload = False ) for task in mb . tasks : task . load () for fold in task . folds : # training inputs are either chemical compositions as strings # or crystal structures as pymatgen.Structure objects train_inputs , train_outputs = task . get_train_and_val_data ( fold ) # train and validate your model my_model . train_and_Validate ( train_inputs , train_outputs ) test_inputs = task . get_test_data ( fold , include_target = False ) predictions = my_model . predict ( test_inputs ) task . record ( fold , predictions ) mb . to_file ( \"my_models_benchmark.json\" ) The output file, in this case my_models_benchmark.json contains everything predicted by your benchmark. Keep this file, as it is the core result that will be submitted to the leaderboard. Note: Benchmark subsets If you want to benchmark on a subset of Matbench tasks, set the subset argument when creating MatbenchBenchmark and use the same code as above. The repo accepts subsets of matbench tasks as well which will appear on a separate \"task-specific\" leaderboard. Step 3: Make a PR Make a pull request to the Matbench repo with the following 3 items: the output file , the .json from Step 2 which is automatically formatted. a reference to a peer-reviewed publication or preprint describing your algorithm. a jupyter notebook with some code for running your algorithm on Matbench Your output file will be automatically validated by the workflows on the matbench repo; once it's validated, it will be merged and will automatically appear in the Full Benchmark Data !","title":"Running and submitting benchmarks"},{"location":"running_and_submitting_benchmarks/#step-1-install-the-python-package","text":"See the installation page for more details.","title":"Step 1: Install the python package"},{"location":"running_and_submitting_benchmarks/#step-2-record-your-data","text":"You can use the matbench python package to retrieve the training and testing splits as well as record new predictions. Recording and saving your data with matbench should take no more than 10 lines of matbench code. from matbench.bench import MatbenchBenchmark mb = MatbenchBenchmark ( autoload = False ) for task in mb . tasks : task . load () for fold in task . folds : # training inputs are either chemical compositions as strings # or crystal structures as pymatgen.Structure objects train_inputs , train_outputs = task . get_train_and_val_data ( fold ) # train and validate your model my_model . train_and_Validate ( train_inputs , train_outputs ) test_inputs = task . get_test_data ( fold , include_target = False ) predictions = my_model . predict ( test_inputs ) task . record ( fold , predictions ) mb . to_file ( \"my_models_benchmark.json\" ) The output file, in this case my_models_benchmark.json contains everything predicted by your benchmark. Keep this file, as it is the core result that will be submitted to the leaderboard.","title":"Step 2: Record your data."},{"location":"running_and_submitting_benchmarks/#note-benchmark-subsets","text":"If you want to benchmark on a subset of Matbench tasks, set the subset argument when creating MatbenchBenchmark and use the same code as above. The repo accepts subsets of matbench tasks as well which will appear on a separate \"task-specific\" leaderboard.","title":"Note: Benchmark subsets"},{"location":"running_and_submitting_benchmarks/#step-3-make-a-pr","text":"Make a pull request to the Matbench repo with the following 3 items: the output file , the .json from Step 2 which is automatically formatted. a reference to a peer-reviewed publication or preprint describing your algorithm. a jupyter notebook with some code for running your algorithm on Matbench Your output file will be automatically validated by the workflows on the matbench repo; once it's validated, it will be merged and will automatically appear in the Full Benchmark Data !","title":"Step 3: Make a PR"}]}